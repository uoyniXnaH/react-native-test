{"version":3,"sources":["App.tsx"],"names":["App","Permissions","ask","permission","askForPermission","useState","Camera","Constants","Type","back","type","scanned","setScanned","autoFocus","setAutoFocus","zoom","setZoom","whiteBal","setWhiteBal","focusDepth","setFocusDepth","whiteBalanceEnum","WhiteBalance","auto","continuous","status","style","styles","container","camContainer","whiteBalance","barCodeScannerSettings","barCodeTypes","BarCodeScanner","BarCodeType","qr","onBarCodeScanned","undefined","data","alert","title","onPress","paramContainer","button","param","z","StyleSheet","create","width","height","alignItems","flexDirection","justifyContent","flexWrap","maxWidth","marginTop","textAlign","backgroundColor","borderRadius","color"],"mappings":"iOAOe,SAASA,IAEtB,MAAuCC,IAA2BA,IAAoB,CAACC,KAAK,IAA5F,WAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwBC,mBAASC,IAAOC,UAAUC,KAAKC,MAAvD,WAAOC,EAAP,KACA,GADA,KAC8BL,oBAAS,IAAvC,WAAOM,EAAP,KAAgBC,EAAhB,KACA,EAAkCP,oBAAS,GAA3C,WAAOQ,EAAP,KAAkBC,EAAlB,KACA,EAAwBT,mBAAS,GAAjC,WAAOU,EAAP,KAAaC,EAAb,KACA,EAAgCX,mBAAS,GAAzC,WAAOY,EAAP,KAAiBC,EAAjB,KACA,EAAoCb,mBAAS,GAA7C,WAAOc,EAAP,KAAmBC,EAAnB,KAEMC,EAAmB,CACvBf,IAAOC,UAAUe,aAAaC,KAC9BjB,IAAOC,UAAUe,aAAaE,YA0BhC,OAAmB,OAAfrB,EACK,kBAAC,IAAD,MAEkB,aAAb,MAAVA,OAAA,EAAAA,EAAYsB,SACdrB,IACO,kBAAC,IAAD,6BAGP,kBAAC,IAAD,CAAMsB,MAAOC,EAAOC,WAClB,kBAAC,IAAD,CAAMF,MAAOC,EAAOE,cAClB,kBAAC,IAAD,CACEnB,KAAMA,EACNG,UAAWA,EACXE,KAAMA,EACNe,aAAcT,EAAiBJ,GAC/BE,WAAYA,EACZY,uBAAwB,CACtBC,aAAc,CAACC,IAAe1B,UAAU2B,YAAYC,KAEtDC,iBAAkBzB,OAAU0B,EAxBd,SAAC,GAAiB,EAAhB3B,KAAiB,IAAX4B,EAAU,EAAVA,KAC5B1B,GAAW,GACX2B,MAAM,QAAQD,KAwBR,kBAAC,IAAD,eAED3B,GAAW,kBAAC,IAAD,CAAQ6B,MAAO,YAAaC,QAAS,WAAK7B,GAAW,OAC/DD,GAAW,kBAAC,IAAD,CAAQ6B,MAAO,aAAcC,QAAS,kBAAIF,MAAM,kBAE/D,kBAAC,IAAD,CAAMb,MAAOC,EAAOe,gBAChB,kBAAC,IAAD,CAAkBhB,MAAOC,EAAOgB,OAAQF,QAAS,kBAAM3B,GAAcD,KACnE,kBAAC,IAAD,CAAMa,MAAOC,EAAOiB,OAApB,eAAwC/B,EAAY,KAAO,QAE7D,kBAAC,IAAD,CAAkBa,MAAOC,EAAOgB,OAAQF,QA/CvB,WACvB,IAAII,EAAI1B,EAAa,IACjB0B,EAAI,IAAGA,EAAI,GACfzB,EAAcyB,KA6CN,kBAAC,IAAD,CAAMnB,MAAOC,EAAOiB,OAApB,gBAAyCzB,IAE3C,kBAAC,IAAD,CAAkBO,MAAOC,EAAOgB,OAAQF,QAxD7B,WACjB,IAAII,EAAI9B,EAAO,IACX8B,EAAI,IAAGA,EAAI,GACf7B,EAAQ6B,KAsDA,kBAAC,IAAD,CAAMnB,MAAOC,EAAOiB,OAApB,SAAkC7B,IAEpC,kBAAC,IAAD,CAAkBW,MAAOC,EAAOgB,OAAQF,QA/CrB,WACzB,IAAII,EAAI5B,EAAW,EACf4B,EAAI,IAAGA,EAAI,GACf3B,EAAY2B,KA6CJ,kBAAC,IAAD,CAAMnB,MAAOC,EAAOiB,OAApB,kBACA,kBAAC,IAAD,CAAMlB,MAAOC,EAAOiB,OAAQvB,EAAiBJ,OAOzD,IAAMU,EAASmB,IAAWC,OAAO,CAC/BnB,UAAW,CACToB,MAAO,OACPC,OAAQ,OACRC,WAAY,UAEdrB,aAAc,CACZmB,MAAO,OACPC,OAAQ,OAEVP,eAAgB,CACdS,cAAe,MACfC,eAAgB,eAChBF,WAAY,SACZG,SAAU,QAEZV,OAAQ,CACNK,MAAO,MACPM,SAAU,MACVL,OAAQ,GACRM,UAAW,GACXH,eAAgB,SAChBI,UAAW,SACXC,gBAAiB,UACjBC,aAAc,IAEhBd,MAAO,CACLe,MAAO,Y","file":"static/js/app.7249334f.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport React, {useState, useEffect} from 'react';\r\nimport { StyleSheet, Text, View, Button, TouchableOpacity } from 'react-native';\r\nimport { Camera } from 'expo-camera';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\nimport * as Permissions from 'expo-permissions';\r\n\r\nexport default function App() {\r\n  // const [hasPermission, setHasPermission] = useState(false);\r\n  const [permission, askForPermission] = Permissions.usePermissions(Permissions.CAMERA, {ask: true});\r\n  const [type, setType] = useState(Camera.Constants.Type.back);\r\n  const [scanned, setScanned] = useState(false);\r\n  const [autoFocus, setAutoFocus] = useState(true);\r\n  const [zoom, setZoom] = useState(0);\r\n  const [whiteBal, setWhiteBal] = useState(0);\r\n  const [focusDepth, setFocusDepth] = useState(0);\r\n\r\n  const whiteBalanceEnum = [\r\n    Camera.Constants.WhiteBalance.auto,\r\n    Camera.Constants.WhiteBalance.continuous\r\n  ];\r\n\r\n  const switchZoom = () => {\r\n    var z = zoom + 0.25;\r\n    if (z > 1) z = 0;\r\n    setZoom(z);\r\n  }\r\n\r\n  const switchFocusDepth = () => {\r\n    var z = focusDepth + 0.25;\r\n    if (z > 1) z = 0;\r\n    setFocusDepth(z);\r\n  }\r\n\r\n  const switchWhiteBalance = () => {\r\n    var z = whiteBal + 1;\r\n    if (z > 1) z = 0;\r\n    setWhiteBal(z);\r\n  }\r\n\r\n  const handleScanned = ({type, data}) => {\r\n    setScanned(true);\r\n    alert(`Get: ${data}`);\r\n  }\r\n\r\n  if (permission === null) {\r\n    return <View />;\r\n  }\r\n  if (permission?.status !== \"granted\") {\r\n    askForPermission();\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.camContainer}>\r\n        <Camera\r\n          type={type}\r\n          autoFocus={autoFocus}\r\n          zoom={zoom}\r\n          whiteBalance={whiteBalanceEnum[whiteBal]}\r\n          focusDepth={focusDepth}\r\n          barCodeScannerSettings={{\r\n            barCodeTypes: [BarCodeScanner.Constants.BarCodeType.qr],\r\n          }}\r\n          onBarCodeScanned={scanned ? undefined : handleScanned}\r\n        >\r\n          <Text>0.0.8</Text>\r\n        </Camera>\r\n        {scanned && <Button title={'Try again'} onPress={()=>{setScanned(false)}} />}\r\n        {!scanned && <Button title={'waiting...'} onPress={()=>alert(\"waiting...\")} />}\r\n      </View>\r\n      <View style={styles.paramContainer}>\r\n          <TouchableOpacity style={styles.button} onPress={() => setAutoFocus(!autoFocus)}>\r\n            <Text style={styles.param}>Auto focus: {autoFocus ? \"ON\" : \"OFF\"}</Text>\r\n          </TouchableOpacity>\r\n          <TouchableOpacity style={styles.button} onPress={switchFocusDepth}>\r\n            <Text style={styles.param}>Focus depth: {focusDepth}</Text>\r\n          </TouchableOpacity>\r\n          <TouchableOpacity style={styles.button} onPress={switchZoom}>\r\n            <Text style={styles.param}>Zoom: {zoom}</Text>\r\n          </TouchableOpacity>\r\n          <TouchableOpacity style={styles.button} onPress={switchWhiteBalance}>\r\n            <Text style={styles.param}>White balance:</Text>\r\n            <Text style={styles.param}>{whiteBalanceEnum[whiteBal]}</Text>\r\n          </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: '100%',\r\n    height: '100%',\r\n    alignItems: 'center'\r\n  },\r\n  camContainer: {\r\n    width: '100%',\r\n    height: '70%'\r\n  },\r\n  paramContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-evenly',\r\n    alignItems: 'center',\r\n    flexWrap: 'wrap'\r\n  },\r\n  button: {\r\n    width: '45%',\r\n    maxWidth: '45%',\r\n    height: 60,\r\n    marginTop: 12,\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    backgroundColor: '#1572a1',\r\n    borderRadius: 12\r\n  },\r\n  param: {\r\n    color: 'white'\r\n  }\r\n});\r\n"],"sourceRoot":""}