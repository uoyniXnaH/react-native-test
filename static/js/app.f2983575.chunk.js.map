{"version":3,"sources":["App.tsx"],"names":["App","useState","hasPermission","setHasPermission","Camera","Constants","Type","back","type","scanned","setScanned","useEffect","a","async","requestPermissionsAsync","status","style","styles","container","camera","barCodeScannerSettings","barCodeTypes","BarCodeScanner","BarCodeType","qr","onBarCodeScanned","undefined","data","alert","title","onPress","StyleSheet","create","flex"],"mappings":"0NAMe,SAASA,IACtB,MAA0CC,oBAAS,GAAnD,WAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAwBF,mBAASG,IAAOC,UAAUC,KAAKC,MAAvD,WAAOC,EAAP,KACA,GADA,KAC8BP,oBAAS,IAAvC,WAAOQ,EAAP,KAAgBC,EAAhB,KAcA,OAPAC,qBAAU,YACR,WAAC,UAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAC0BR,IAAOU,2BADjC,gBACSC,EADT,EACSA,OACRZ,EAA4B,YAAXY,GAFlB,4DAAD,KAIC,IAEmB,OAAlBb,EACK,kBAAC,IAAD,OAEa,IAAlBA,EACK,kBAAC,IAAD,4BAGP,kBAAC,IAAD,CAAMc,MAAOC,EAAOC,WAClB,kBAAC,IAAD,CACEF,MAAOC,EAAOE,OACdX,KAAMA,EACNY,uBAAwB,CACtBC,aAAc,CAACC,IAAejB,UAAUkB,YAAYC,KAEtDC,iBAAkBhB,OAAUiB,EA1BZ,SAAC,GAAiB,EAAhBlB,KAAiB,IAAXmB,EAAU,EAAVA,KAC5BjB,GAAW,GACXkB,MAAM,QAAQD,KA0BV,kBAAC,IAAD,eAEDlB,GAAW,kBAAC,IAAD,CAAQoB,MAAO,YAAaC,QAAS,WAAKpB,GAAW,OAC/DD,GAAW,kBAAC,IAAD,CAAQoB,MAAO,aAAcC,QAAS,kBAAIF,MAAM,kBAKnE,IAAMX,EAASc,IAAWC,OAAO,CAC/Bd,UAAW,CACTe,KAAM,GAERd,OAAQ,CACNc,KAAM,M","file":"static/js/app.f2983575.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport React, {useState, useEffect} from 'react';\r\nimport { StyleSheet, Text, View, Button } from 'react-native';\r\nimport { Camera } from 'expo-camera';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\n\r\nexport default function App() {\r\n  const [hasPermission, setHasPermission] = useState(false);\r\n  const [type, setType] = useState(Camera.Constants.Type.back);\r\n  const [scanned, setScanned] = useState(false);\r\n\r\n  const handleScanned = ({type, data}) => {\r\n    setScanned(true);\r\n    alert(`Get: ${data}`);\r\n  }\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await Camera.requestPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    })();\r\n  }, []);\r\n\r\n  if (hasPermission === null) {\r\n    return <View />;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n  return (\r\n    <View style={styles.container}>\r\n      <Camera\r\n        style={styles.camera}\r\n        type={type}\r\n        barCodeScannerSettings={{\r\n          barCodeTypes: [BarCodeScanner.Constants.BarCodeType.qr],\r\n        }}\r\n        onBarCodeScanned={scanned ? undefined : handleScanned}\r\n      >\r\n        <Text>0.0.8</Text>\r\n      </Camera>\r\n      {scanned && <Button title={'Try again'} onPress={()=>{setScanned(false)}} />}\r\n      {!scanned && <Button title={'waiting...'} onPress={()=>alert(\"waiting...\")} />}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1\r\n  },\r\n  camera: {\r\n    flex: 1\r\n  }\r\n});\r\n"],"sourceRoot":""}