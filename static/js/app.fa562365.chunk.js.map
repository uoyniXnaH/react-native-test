{"version":3,"sources":["App.tsx"],"names":["App","Permissions","ask","permission","askForPermission","useState","Camera","Constants","Type","back","type","isReady","setIsReady","camera","setCamera","photoMode","setPhotoMode","mode","scanned","setScanned","autoFocus","setAutoFocus","zoom","setZoom","whiteBal","setWhiteBal","focusDepth","setFocusDepth","whiteBalanceEnum","WhiteBalance","auto","continuous","status","style","styles","container","camContainer","ref","whiteBalance","onCameraReady","barCodeScannerSettings","undefined","barCodeTypes","BarCodeScanner","BarCodeType","qr","onBarCodeScanned","data","alert","title","onPress","paramContainer","button","param","z","a","async","takePictureAsync","quality","pic","scanFromURLAsync","uri","then","result","catch","error","StyleSheet","create","width","height","alignItems","flexDirection","justifyContent","flexWrap","maxWidth","marginTop","textAlign","backgroundColor","borderRadius","color"],"mappings":"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","file":"static/js/app.fa562365.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport React, {useState, useEffect} from 'react';\r\nimport { StyleSheet, Text, View, Button, TouchableOpacity } from 'react-native';\r\nimport { Camera } from 'expo-camera';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\nimport * as Permissions from 'expo-permissions';\r\n\r\nexport default function App() {\r\n  // const [hasPermission, setHasPermission] = useState(false);\r\n  const [permission, askForPermission] = Permissions.usePermissions(Permissions.CAMERA, {ask: true});\r\n  const [type, setType] = useState(Camera.Constants.Type.back);\r\n  const [isReady, setIsReady] = useState(false);\r\n  const [camera, setCamera] = useState<Camera | null>(null);\r\n  const [photoMode, setPhotoMode] = useState(false);\r\n  const [mode, setMode] = useState(\"Scan mode\");\r\n  const [scanned, setScanned] = useState(false);\r\n  const [autoFocus, setAutoFocus] = useState(true);\r\n  const [zoom, setZoom] = useState(0);\r\n  const [whiteBal, setWhiteBal] = useState(0);\r\n  const [focusDepth, setFocusDepth] = useState(0);\r\n\r\n  const whiteBalanceEnum = [\r\n    Camera.Constants.WhiteBalance.auto,\r\n    Camera.Constants.WhiteBalance.continuous\r\n  ];\r\n\r\n  const switchZoom = () => {\r\n    var z = zoom + 0.25;\r\n    if (z > 1) z = 0;\r\n    setZoom(z);\r\n  }\r\n\r\n  const switchFocusDepth = () => {\r\n    var z = focusDepth + 0.25;\r\n    if (z > 1) z = 0;\r\n    setFocusDepth(z);\r\n  }\r\n\r\n  const switchWhiteBalance = () => {\r\n    var z = whiteBal + 1;\r\n    if (z > 1) z = 0;\r\n    setWhiteBal(z);\r\n  }\r\n\r\n  const handleScanned = ({type, data}) => {\r\n    setScanned(true);\r\n    alert(`Get: ${data}`);\r\n  }\r\n\r\n  const handleTakingPhoto = async () => {\r\n    if (camera) {\r\n      const pic = await camera.takePictureAsync({\r\n        quality: 1\r\n      });\r\n      await BarCodeScanner.scanFromURLAsync(pic.uri, [BarCodeScanner.Constants.BarCodeType.qr])\r\n      .then((result) => {\r\n        alert(`Get: ${result[0].data}`);\r\n      })\r\n      .catch((error) => {\r\n        alert(`Failed`);\r\n      });\r\n    }\r\n  }\r\n\r\n  if (permission === null) {\r\n    return <View />;\r\n  }\r\n  if (permission?.status !== \"granted\") {\r\n    askForPermission();\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.camContainer}>\r\n        <Camera\r\n          ref={(ref) => setCamera(ref)}\r\n          type={type}\r\n          autoFocus={autoFocus}\r\n          zoom={zoom}\r\n          whiteBalance={whiteBalanceEnum[whiteBal]}\r\n          focusDepth={focusDepth}\r\n          onCameraReady={() => setIsReady(true)}\r\n          barCodeScannerSettings={photoMode ? undefined : {\r\n            barCodeTypes: [BarCodeScanner.Constants.BarCodeType.qr],\r\n          }}\r\n          onBarCodeScanned={(scanned || photoMode) ? undefined : handleScanned}\r\n        >\r\n          <Text>0.0.8</Text>\r\n        </Camera>\r\n        {scanned && <Button title={'Press to try again'} onPress={()=>{setScanned(false)}} />}\r\n        {!scanned && <Button title={mode} onPress={()=>alert(mode)} />}\r\n      </View>\r\n      <View style={styles.paramContainer}>\r\n          <TouchableOpacity style={styles.button} onPress={() => setAutoFocus(!autoFocus)}>\r\n            <Text style={styles.param}>Auto focus: {autoFocus ? \"ON\" : \"OFF\"}</Text>\r\n          </TouchableOpacity>\r\n          <TouchableOpacity style={styles.button} onPress={switchFocusDepth}>\r\n            <Text style={styles.param}>Focus depth: {focusDepth}</Text>\r\n          </TouchableOpacity>\r\n          <TouchableOpacity style={styles.button} onPress={switchZoom}>\r\n            <Text style={styles.param}>Zoom: {zoom}</Text>\r\n          </TouchableOpacity>\r\n          <TouchableOpacity style={styles.button} onPress={switchWhiteBalance}>\r\n            <Text style={styles.param}>White balance:</Text>\r\n            <Text style={styles.param}>{whiteBalanceEnum[whiteBal]}</Text>\r\n          </TouchableOpacity>\r\n          {isReady && <TouchableOpacity style={styles.button} onPress={() => setPhotoMode(!photoMode)}>\r\n            <Text style={styles.param}>Photo mode:</Text>\r\n            <Text style={styles.param}>{photoMode ? \"ON\" : \"OFF\"}</Text>\r\n          </TouchableOpacity>}\r\n          {photoMode && <TouchableOpacity style={styles.button} onPress={handleTakingPhoto}>\r\n            <Text style={styles.param}>Take photo</Text>\r\n          </TouchableOpacity>}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: '100%',\r\n    height: '100%',\r\n    alignItems: 'center'\r\n  },\r\n  camContainer: {\r\n    width: '100%',\r\n    height: '70%'\r\n  },\r\n  paramContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-evenly',\r\n    alignItems: 'center',\r\n    flexWrap: 'wrap'\r\n  },\r\n  button: {\r\n    width: '45%',\r\n    maxWidth: '45%',\r\n    height: 60,\r\n    marginTop: 12,\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    backgroundColor: '#1572a1',\r\n    borderRadius: 12\r\n  },\r\n  param: {\r\n    color: 'white'\r\n  }\r\n});\r\n"],"sourceRoot":""}