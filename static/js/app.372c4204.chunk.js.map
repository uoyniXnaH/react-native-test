{"version":3,"sources":["App.tsx"],"names":["App","useState","hasPermission","setHasPermission","Camera","Constants","Type","back","type","scanned","setScanned","autoFocus","setAutoFocus","zoom","setZoom","whiteBal","setWhiteBal","focusDepth","whiteBalanceEnum","WhiteBalance","auto","cloudy","continuous","fluorescent","incandescent","shadow","sunny","useEffect","a","async","requestPermissionsAsync","status","style","styles","container","camContainer","whiteBalance","barCodeScannerSettings","barCodeTypes","BarCodeScanner","BarCodeType","qr","onBarCodeScanned","undefined","data","alert","title","onPress","paramContainer","button","z","StyleSheet","create","width","height","alignItems","flexDirection","justifyContent","flexWrap","marginTop","textAlign","color","backgroundColor","borderRadius"],"mappings":"iOAMe,SAASA,IACtB,MAA0CC,oBAAS,GAAnD,WAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAwBF,mBAASG,IAAOC,UAAUC,KAAKC,MAAvD,WAAOC,EAAP,KACA,GADA,KAC8BP,oBAAS,IAAvC,WAAOQ,EAAP,KAAgBC,EAAhB,KACA,EAAkCT,oBAAS,GAA3C,WAAOU,EAAP,KAAkBC,EAAlB,KACA,EAAwBX,mBAAS,GAAjC,WAAOY,EAAP,KAAaC,EAAb,KACA,EAAgCb,mBAAS,GAAzC,WAAOc,EAAP,KAAiBC,EAAjB,KACA,EAAoCf,mBAAS,GAA7C,WAAOgB,EAAP,KAEMC,GAFN,KAEyB,CACvBd,IAAOC,UAAUc,aAAaC,KAC9BhB,IAAOC,UAAUc,aAAaE,OAC9BjB,IAAOC,UAAUc,aAAaG,WAC9BlB,IAAOC,UAAUc,aAAaI,YAC9BnB,IAAOC,UAAUc,aAAaK,aAC9BpB,IAAOC,UAAUc,aAAaM,OAC9BrB,IAAOC,UAAUc,aAAaO,QAiChC,OAPAC,qBAAU,YACR,WAAC,UAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAC0BxB,IAAO0B,2BADjC,gBACSC,EADT,EACSA,OACR5B,EAA4B,YAAX4B,GAFlB,4DAAD,KAIC,IAEmB,OAAlB7B,EACK,kBAAC,IAAD,OAEa,IAAlBA,EACK,kBAAC,IAAD,4BAGP,kBAAC,IAAD,CAAM8B,MAAOC,EAAOC,WAClB,kBAAC,IAAD,CAAMF,MAAOC,EAAOE,cAClB,kBAAC,IAAD,CACE3B,KAAMA,EACNG,UAAWA,EACXE,KAAMA,EACNuB,aAAclB,EAAiBH,GAC/BE,WAAYA,EACZoB,uBAAwB,CACtBC,aAAc,CAACC,IAAelC,UAAUmC,YAAYC,KAEtDC,iBAAkBjC,OAAUkC,EA9Bd,SAAC,GAAiB,EAAhBnC,KAAiB,IAAXoC,EAAU,EAAVA,KAC5BlC,GAAW,GACXmC,MAAM,QAAQD,KA8BR,kBAAC,IAAD,eAEDnC,GAAW,kBAAC,IAAD,CAAQqC,MAAO,YAAaC,QAAS,WAAKrC,GAAW,OAC/DD,GAAW,kBAAC,IAAD,CAAQqC,MAAO,aAAcC,QAAS,kBAAIF,MAAM,kBAE/D,kBAAC,IAAD,CAAMb,MAAOC,EAAOe,gBAChB,kBAAC,IAAD,CAAkBhB,MAAOC,EAAOgB,OAAQF,QAAS,kBAAMnC,GAAcD,KAArE,eACeA,EAAY,KAAO,OAElC,kBAAC,IAAD,CAAkBqB,MAAOC,EAAOgB,OAAQF,QArDvB,WACvB,IAAIG,EAAIjC,EAAa,IACjBiC,EAAI,IAAGA,EAAI,GACfpC,EAAQoC,KAkDF,gBACgBjC,GAEhB,kBAAC,IAAD,CAAkBe,MAAOC,EAAOgB,OAAQF,QA9D7B,WACjB,IAAIG,EAAIrC,EAAO,IACXqC,EAAI,IAAGA,EAAI,GACfpC,EAAQoC,KA2DF,SACSrC,GAET,kBAAC,IAAD,CAAkBmB,MAAOC,EAAOgB,OAAQF,QArDrB,WACzB,IAAIG,EAAInC,EAAW,EACfmC,EAAI,IAAGA,EAAI,GACflC,EAAYkC,KAkDN,kBACkBhC,EAAiBH,MAO7C,IAAMkB,EAASkB,IAAWC,OAAO,CAC/BlB,UAAW,CACTmB,MAAO,OACPC,OAAQ,OACRC,WAAY,UAEdpB,aAAc,CACZkB,MAAO,OACPC,OAAQ,OAEVN,eAAgB,CACdQ,cAAe,MACfC,eAAgB,eAChBF,WAAY,SACZG,SAAU,QAEZT,OAAQ,CACNI,MAAO,MACPC,OAAQ,GACRK,UAAW,GACXF,eAAgB,SAChBG,UAAW,SACXC,MAAO,QACPC,gBAAiB,UACjBC,aAAc,O","file":"static/js/app.372c4204.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport React, {useState, useEffect} from 'react';\r\nimport { StyleSheet, Text, View, Button, TouchableOpacity } from 'react-native';\r\nimport { Camera } from 'expo-camera';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\n\r\nexport default function App() {\r\n  const [hasPermission, setHasPermission] = useState(false);\r\n  const [type, setType] = useState(Camera.Constants.Type.back);\r\n  const [scanned, setScanned] = useState(false);\r\n  const [autoFocus, setAutoFocus] = useState(true);\r\n  const [zoom, setZoom] = useState(0);\r\n  const [whiteBal, setWhiteBal] = useState(0);\r\n  const [focusDepth, setFocusDepth] = useState(0);\r\n\r\n  const whiteBalanceEnum = [\r\n    Camera.Constants.WhiteBalance.auto,\r\n    Camera.Constants.WhiteBalance.cloudy,\r\n    Camera.Constants.WhiteBalance.continuous,\r\n    Camera.Constants.WhiteBalance.fluorescent,\r\n    Camera.Constants.WhiteBalance.incandescent,\r\n    Camera.Constants.WhiteBalance.shadow,\r\n    Camera.Constants.WhiteBalance.sunny,\r\n  ];\r\n\r\n  const switchZoom = () => {\r\n    var z = zoom + 0.25;\r\n    if (z > 1) z = 0;\r\n    setZoom(z);\r\n  }\r\n\r\n  const switchFocusDepth = () => {\r\n    var z = focusDepth + 0.25;\r\n    if (z > 1) z = 0;\r\n    setZoom(z);\r\n  }\r\n\r\n  const switchWhiteBalance = () => {\r\n    var z = whiteBal + 1;\r\n    if (z > 6) z = 0;\r\n    setWhiteBal(z);\r\n  }\r\n\r\n  const handleScanned = ({type, data}) => {\r\n    setScanned(true);\r\n    alert(`Get: ${data}`);\r\n  }\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await Camera.requestPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    })();\r\n  }, []);\r\n\r\n  if (hasPermission === null) {\r\n    return <View />;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.camContainer}>\r\n        <Camera\r\n          type={type}\r\n          autoFocus={autoFocus}\r\n          zoom={zoom}\r\n          whiteBalance={whiteBalanceEnum[whiteBal]}\r\n          focusDepth={focusDepth}\r\n          barCodeScannerSettings={{\r\n            barCodeTypes: [BarCodeScanner.Constants.BarCodeType.qr],\r\n          }}\r\n          onBarCodeScanned={scanned ? undefined : handleScanned}\r\n        >\r\n          <Text>0.0.8</Text>\r\n        </Camera>\r\n        {scanned && <Button title={'Try again'} onPress={()=>{setScanned(false)}} />}\r\n        {!scanned && <Button title={'waiting...'} onPress={()=>alert(\"waiting...\")} />}\r\n      </View>\r\n      <View style={styles.paramContainer}>\r\n          <TouchableOpacity style={styles.button} onPress={() => setAutoFocus(!autoFocus)}>\r\n            Auto focus: {autoFocus ? \"ON\" : \"OFF\"}\r\n          </TouchableOpacity>\r\n          <TouchableOpacity style={styles.button} onPress={switchFocusDepth}>\r\n            Focus depth: {focusDepth}\r\n          </TouchableOpacity>\r\n          <TouchableOpacity style={styles.button} onPress={switchZoom}>\r\n            Zoom: {zoom}\r\n          </TouchableOpacity>\r\n          <TouchableOpacity style={styles.button} onPress={switchWhiteBalance}>\r\n            White balance: {whiteBalanceEnum[whiteBal]}\r\n          </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: '100%',\r\n    height: '100%',\r\n    alignItems: 'center'\r\n  },\r\n  camContainer: {\r\n    width: '100%',\r\n    height: '70%'\r\n  },\r\n  paramContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-evenly',\r\n    alignItems: 'center',\r\n    flexWrap: 'wrap'\r\n  },\r\n  button: {\r\n    width: '40%',\r\n    height: 48,\r\n    marginTop: 12,\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    color: 'white',\r\n    backgroundColor: '#1572a1',\r\n    borderRadius: 12\r\n  }\r\n});\r\n"],"sourceRoot":""}